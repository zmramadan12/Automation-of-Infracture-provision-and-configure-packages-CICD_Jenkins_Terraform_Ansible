pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID      = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY  = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_REGION             = "ap-southeast-3"
    }

    stages {
        stage('Checkout code') {
            steps {
                git branch: 'main', url: 'https://github.com/zmramadan12/Automation-of-Infracture-provision-and-configure-packages-CICD_Jenkins_Terraform_Ansible.git'
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Plan') {
            steps {
                sh 'terraform plan -out=tfplan'
            }
        }

        stage('Terraform Apply') {
            steps {
                sh 'terraform apply -auto-approve tfplan'
            }
        }

        stage('Clean Inventory') {
            steps {
                sh 'rm -f inventory.ini'
            }
        }

        stage('Generate Inventory') {
            steps {
                script {
                    def ip = sh(script: 'terraform output -raw public_ip', returnStdout: true).trim()
                    def inventoryContent = "[web]\n${ip} ansible_user=ec2-user ansible_ssh_private_key_file=${WORKSPACE}/webserver-apache-key.pem\n"
                    writeFile file: 'inventory.ini', text: inventoryContent
                    sh 'chmod 400 inventory.ini'
                    sh 'cat inventory.ini'
                    echo "inventory.ini created with content above"
                }
            }
        }

        stage('Fix Workspace Permission') {
            steps {
                sh '''
                  sudo chown -R $(whoami) ${WORKSPACE} || true
                  chmod -R u+w ${WORKSPACE}
                '''
            }
        }

        stage('Upload SSH Key') {
            steps {
                withCredentials([file(credentialsId: 'EC2_PEM_FILE', variable: 'SSH_KEY_FILE')]) {
                    // Aman tanpa Groovy string interpolation langsung di shell script
                    sh(script: '''cp "${SSH_KEY_FILE}" "${WORKSPACE}/webserver-apache-key.pem" && chmod 400 "${WORKSPACE}/webserver-apache-key.pem"''')
                }
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                sh '''
                  chmod 400 "${WORKSPACE}/inventory.ini"
                  ansible-playbook -i "${WORKSPACE}/inventory.ini" "${WORKSPACE}/playbook.yaml" \\
                    --private-key "${WORKSPACE}/webserver-apache-key.pem" \\
                    --ssh-extra-args='-o StrictHostKeyChecking=no'
                '''
            }
        }
    }

    post {
        failure {
            echo "Pipeline failed. Check the console logs for details."
        }
    }
}

